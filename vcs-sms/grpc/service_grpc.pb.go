// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UptimeCheckService_UptimeCheck_FullMethodName = "/UptimeCheckService/UptimeCheck"
)

// UptimeCheckServiceClient is the client API for UptimeCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UptimeCheckServiceClient interface {
	UptimeCheck(ctx context.Context, in *UptimeCheckRequest, opts ...grpc.CallOption) (*UptimeCheckResponse, error)
}

type uptimeCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUptimeCheckServiceClient(cc grpc.ClientConnInterface) UptimeCheckServiceClient {
	return &uptimeCheckServiceClient{cc}
}

func (c *uptimeCheckServiceClient) UptimeCheck(ctx context.Context, in *UptimeCheckRequest, opts ...grpc.CallOption) (*UptimeCheckResponse, error) {
	out := new(UptimeCheckResponse)
	err := c.cc.Invoke(ctx, UptimeCheckService_UptimeCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UptimeCheckServiceServer is the server API for UptimeCheckService service.
// All implementations must embed UnimplementedUptimeCheckServiceServer
// for forward compatibility
type UptimeCheckServiceServer interface {
	UptimeCheck(context.Context, *UptimeCheckRequest) (*UptimeCheckResponse, error)
	mustEmbedUnimplementedUptimeCheckServiceServer()
}

// UnimplementedUptimeCheckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUptimeCheckServiceServer struct {
}

func (UnimplementedUptimeCheckServiceServer) UptimeCheck(context.Context, *UptimeCheckRequest) (*UptimeCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UptimeCheck not implemented")
}
func (UnimplementedUptimeCheckServiceServer) mustEmbedUnimplementedUptimeCheckServiceServer() {}

// UnsafeUptimeCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UptimeCheckServiceServer will
// result in compilation errors.
type UnsafeUptimeCheckServiceServer interface {
	mustEmbedUnimplementedUptimeCheckServiceServer()
}

func RegisterUptimeCheckServiceServer(s grpc.ServiceRegistrar, srv UptimeCheckServiceServer) {
	s.RegisterService(&UptimeCheckService_ServiceDesc, srv)
}

func _UptimeCheckService_UptimeCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UptimeCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UptimeCheckServiceServer).UptimeCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UptimeCheckService_UptimeCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UptimeCheckServiceServer).UptimeCheck(ctx, req.(*UptimeCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UptimeCheckService_ServiceDesc is the grpc.ServiceDesc for UptimeCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UptimeCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UptimeCheckService",
	HandlerType: (*UptimeCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UptimeCheck",
			Handler:    _UptimeCheckService_UptimeCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/service.proto",
}
